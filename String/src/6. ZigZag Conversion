// The key is to find the pattern, more like a Math problem.
// method 1:
// pattern:
//  1. cycle = 2*nRows - 2;
//  2. the second element of each row is: secondJ = (j-i) + cycle - i;

public String convert(String s, int nRows){
  if(nRows < 1)
    return s;
  StringBuilder sb = new StringBuilder();
  int cycle = 2 * nRows-1;
  for(int i = 0; i < nRows-1; i++){
    for(int j = i; j < s.length(); j += cycle){
      sb.append(s.charAt(j));
      int secondJ = j-i + cycle-i;
      if(i != 0 && i != nRows-1 && secondJ < s.length())
        append(s.charAt(secondJ));
    }
  }
  return sb.toString();
}

// method2:
// for each row, create StringBuilder to store the char

public String convert(String s){
  char[] c = s.toCharArray();
  int len = c.length;
  StringBuilder[] sb = new StringBuilder[nRows];
  for(int i = 0; i < sb.length; i++)
    sb[i] = new StringBuilder();

  int i = 0;
  while(i < len){
    for(int idx = 0; idx < nRows && i < len; idx++)
      sb[idx].append(c[i++]);
    for(int idx = nRows-2; idx > 0 && i < len; idx--)
      sb[idx].append(c[i++]);
    }
    for(int idx = 1; idx < sb.length; idx++)
      sb[0].append(sb[idx]);
    return sb[0].toString();
  }
